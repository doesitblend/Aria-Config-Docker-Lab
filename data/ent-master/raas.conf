# Assign an ID to your master
#id: master1
id: master1

# Configure log level for log file
log_level_logfile: debug
auto_accept: true

# User that salt-master process (and extensions such as runners) should run as
user: root

# Salt command timeout
timeout: 15

state_events: true
rawfile_json.filename: /var/log/salt/events
# Enable SSE engines
engines:
  - sseapi: {}
  - eventqueue: {}
  - rpcqueue: {}
  - jobcompletion: {}
  - tgtmatch: {}
  - sseapi_cache: {}
  - sseapi_masterfs: {}
  - rawfile_json

# Enable SSE master job cache and event returner
master_job_cache: sseapi
event_return: 
  - sseapi
  - rawfile_json

rawfile_json:
  filename: /var/log/salt/events

# Enable SSE external pillar
ext_pillar:
  - sseapi: {}

# Enable SSE fileserver backend
fileserver_backend:
  - sseapi
  - roots

sseapi_update_interval: 60                  # SSE fileserver update interval, in seconds

#sseapi_server: http://localhost:8080       # URL of SSE server
sseapi_server: http://aria-config-docker-lab-raas-1:8080
#sseapi_config_name: internal               # SSE server credentials, not required if using key authentication
#sseapi_username: 
#sseapi_password: 
#sseapi_ssl_key:                            # Path to the certificate's private key
#sseapi_ssl_cert:                           # Path to the certificate
#sseapi_ssl_validate_cert: True             # Set to False to disable certificate validation
sseapi_timeout: 200                         # Timeout for SSE request, in seconds
sseapi_cluster_id: 'saltines'                          # SSE cluster ID for this master (optional)
sseapi_failover_master: False               # Set to True if this is a failover master
sseapi_poll_interval: 5                     # Interval for retrieving commands from SSE
sseapi_engine_restart_interval: 0           # Interval for restarting SSE sync engine, in seconds (set to 0 for no restart)
sseapi_engine_masterfs: True                # Send masterfs data to SSE
sseapi_cache_pillar: False                  # Set to True to enable caching of pillar data in SSE
sseapi_max_minion_grains_payload: 2000      # The maximum minion grains payload to send per iteration, in minions
sseapi_json_payload_limit: 0                # Maximum JSON payload element size, 0 for no limit
fileserver.sseapi.cache_timeout: 1          # SSE fileserver local cache timeout, in minutes
sseapi_command_age_limit: 0                 # Maximum age of a command, in seconds (drop older entries). Default is 0 which disables the feature.
sseapi_win_minion_deploy_delay: 180         # Delay minion deployment to Windows VM, in seconds
sseapi_linux_minion_deploy_delay: 90        # Delay minion deployment to Linux VM, in seconds

# Queue events locally and send to SSE in batches
sseapi_event_queue:
  name: sseapi-events                       # Local sqlite event queue name
  strategy: always                          # When to queue events: always, on_failure, never
  event_sink: rpc                           # How to ship queued events to RaaS: via RPC call or RabbitMQ (rpc or rmq)
#  amqp_url: amqp://salt:salt@localhost     # If event_sink is set to "rmq", connect via this AMQP URL.
#  amqp_publish_exchange: salt              # Publish events to this AMQP exchange.  Should be the same as the subscribe_exchange.
#  amqp_subscribe_exchange: salt            # Take events from this exchange and drop them on this master's ZMQ bus.  Should be the same as the publish_exchange.
#  amqp_queue_options: {'x-queue-type': 'quorum'}  # Dictionary with Rabbit queue options.
  push_interval: 5                          # How often to push events to SSE, in seconds
  batch_limit: 2000                         # Maximum number of events to push to SSE per interval
  age_limit: 86400                          # Maximum queued event age, in seconds (drop older events)
  size_limit: 35000000                      # Maximum queue size, in events (drop oldest events)
  vacuum_interval: 86400                    # How often to vacuum queue DB, in seconds
  vacuum_limit: 350000                      # Maximum queue size when vacuuming queue DB, in entries

# Queue some RPC calls locally and send to SSE in batches
sseapi_rpc_queue:
  name: sseapi-rpc                          # RPC queue name
  strategy: always                          # When to queue RPC calls: always, on_failure, never
  push_interval: 5                          # How often to send calls to SSE, in seconds
  batch_limit: 500                          # Maximum number of calls to push to SSE per interval
  age_limit: 3600                           # Maximum queued call age, in seconds (drop older entries)
  size_limit: 360000                        # Maximum queue size, in entries (drop oldest entries)
  vacuum_interval: 86400                    # How often to vacuum queue DB, in seconds
  vacuum_limit: 100000                      # Maximum queue size when vacuuming queue DB, in entries

# Calculate target group matches locally
sseapi_tgt_match:
  poll_interval: 60                         # Interval for refreshing SSE target group local cache, in seconds
  workers: 0                                # Number of processes to spawn for target matching, 0 for automatic
  nice: 19                                  # Nice value for worker processes (-20..19)

# Syncs salt minion cache and keys with raas
sseapi_cache:
  poll_interval: 60                         # Interval for refreshing SSE cache, in seconds

# Syncs masterfs data with raas
sseapi_masterfs:
  poll_interval: 60                         # Interval for refreshing SSE masterfs, in seconds

# Cache some SSE objects locally
sseapi_local_cache:
  load: 3600                                # Cache lifetime for save_load() payloads, in seconds
  tgt: 86400                                # Cache lifetime for SSE target group, in seconds
  pillar: 3600                              # Cache lifetime for SSE pillar data, in seconds
  exprmatch: 86400                          # Cache lifetime for SSE target expression matching data, in seconds
  tgtmatch: 86400                           # Cache lifetime for SSE target group matching data, in seconds

